var util      = require("util")
var Extension = require("./extension.js")

var App = function(config){	
	this.config = setConfig(config)
}

var setConfig = function(config){
	if(!config) 
		return {}

	if(utils.isString(config)){
		return {
			application_api_key: config
		}
	}
	if(utils.isPlainObject(config)){
		return config
	}
	checkTypeError(false, "config", "object")
}

var consOptions = utils.curry(function(port, application_api_key, master_key, host, protocol){
	return {
		port               : port,
		application_api_key: application_api_key,
		master_key         : master_key,
		host               : host,
		protocol           : protocol
	}
})

App.prototype.getConfig = function(){
	return this.config;
}

App.prototype.getApiUrl = function(){
	var options = this.getConfig()
	if(!options.port)
		return util.format('%s://%s', options.protocol, options.host);
	return util.format('%s://%s:%d', options.protocol, options.host, options.port);
}

App.prototype.setAppOptions = function(parameter, value, existingOptions){
	var port               = existingOptions.port
	var application_api_key= existingOptions.application_api_key
	var master_key         = existingOptions.master_key
	var host               = existingOptions.host
	var protocol           = existingOptions.protocol
	
	switch(parameter){
		case "port":
			port = value
			break;
		case "application_api_key":
			application_api_key = value
			break;
		case "master_key":
			master_key = value
			break;
		case "host":
			host = value
			break;
		case "protocol":
			protocol = value
			break;

	}
	this.config = consOptions(port, application_api_key, master_key, host, protocol)
	return this;
}

var checkTypeError = function(isValid, value, expectedType){
	if(!isValid)
		throw new Error(value +" should be of type "+ expectedType)
}

App.prototype.setPort = function(value){
	checkTypeError(utils.isNumber(value), "port", "number")
	return this.setAppOptions("port", value, this.getConfig())
}

App.prototype.setApiKey = function(value){
	checkTypeError(utils.isString(value), "application_api_key", "string")
	return this.setAppOptions("application_api_key", value, this.getConfig())
}

App.prototype.setMasterKey = function(value){
	checkTypeError(utils.isString(value), "master_key", "string")
	return this.setAppOptions("master_key", value, this.getConfig())
}

App.prototype.setHost = function(value){
	checkTypeError(utils.isString(value), "host", "string")
	return this.setAppOptions("host", value, this.getConfig())
}

App.prototype.setProtocol = function(value){
	checkTypeError(utils.isString(value), "protocol", "string")
	return this.setAppOptions("protocol", value, this.getConfig())
}

App.prototype.getPort = function(){
	return this.getConfig().port
}

App.prototype.getApiKey = function(){
	return this.getConfig().application_api_key
}

App.prototype.getMasterKey = function(){
	return this.getConfig().master_key
}

App.prototype.getHost = function(){
	return this.getConfig().host
}

App.prototype.getProtocol = function(){
	return this.getConfig().protocol
}

App.prototype.Extension = function(config){
	return Extension.call(this, config);
}

module.exports = function(config){
	return new App(config)
}