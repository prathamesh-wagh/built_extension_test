var ExtensionSDK = require('../index')

describe("Hooks on '/objects' endpoint Method DELETE", function() {
  describe('Successfully Execution', function() {
    describe("For multiple scope", function(){
      it('should update the the query in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('person', "multiple", ["_pre"], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/classes/person/objects': {
            DELETE: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.where("name", "changed")
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_pre/v1/classes/person/objects')
          .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : { "query":{ "name": "something" }},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data.query.name).to.be.equal('changed')
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should add a new query parameter in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('person', 'multiple', ['_pre'], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/classes/person/objects': {
            DELETE: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.lessThan('age', 22)
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_pre/v1/classes/person/objects')
          .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'name': 'abc'},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.be.deep.equal({ name: 'abc', query: { age: { '$lt': 22 } } })
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should send blank data response for delete all', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('person', 'multiple', ['_post'], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/classes/person/objects': {
            DELETE: {
              _post: function(req, res) {
                req.bobjekt.objects = req.bobjekt.objects.map(function(obj){
                  obj.first_name = obj.name
                  delete obj.name
                  return obj
                })
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_post/v1/classes/person/objects')
          .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {"objects": [{name: 'abc'}, {name: 'pqr'}] },
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.be.equal(null)
            server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })  
        })
      })
    })
    describe('For single scope', function(){
      it('should receive a null response in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('person', "single", ["_pre"], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/classes/person/objects/blt123': {
            DELETE: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.assign({name: "something"})
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_pre/v1/classes/person/objects/blt123')
          .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : 'blt123',
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body).to.be.deep.equal({
              isExtensionResponse: true,
              data: null
            })
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should receive a null response in _post phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('person', "single", ["_post"], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/classes/person/objects/blt123': {
            DELETE: {
              _post: function(req, res) {
                req.bobjekt = {
                  name: 'something',
                  age: 22
                }
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_post/v1/classes/person/objects/blt123')
          .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : { name: 'ignored'},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body).to.be.deep.equal({
              isExtensionResponse: true,
              data: null
            })
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
    })
  })
  describe("Error", function () {
    it("should handle the error thrown in _post phase", function(done) {
      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_post'], "DEL")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          DELETE: {
            _post: function(req, res) {
              return utils.Promise.reject({
                name: "is not valid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.del('/api/_post/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'DELETE',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is not valid',
            path: "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it("should handle the error thrown in _post phase", function(done) {
      
      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_post'], "DEL")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          DELETE: {
            _post: function(req, res) {
              return utils.Promise.reject({
                name: "is not valid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.del('/api/_post/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'DELETE',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is not valid',
            path: "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
  })
})