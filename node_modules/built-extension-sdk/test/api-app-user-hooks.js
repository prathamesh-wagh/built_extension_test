var ExtensionSDK = require('../index')

describe("Hooks on '/application/users' endpoint", function() {
  describe('Successfully Execution', function() {
    describe("POST call", function(){
      it('should intercpet application user call in _pre mode', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            POST: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.set('first_name', 'changed')
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.post('/api/_pre/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'first_name': 'abc'},
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'POST',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data.first_name).to.be.equal('changed')
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should add a new field field in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            POST: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.set('newField', 'value')
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.post('/api/_pre/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'first_name': 'abc'},
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'POST',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.deep.equal({
              first_name: 'abc',
              newField  : 'value'
            })
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should change the response structure in _post phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'multiple', ['_post'], "POST")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            POST: {
              _post: function(req, res) {
                req.bobjekt.first_name = "changed"
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.post('/api/_post/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'first_name': 'abc'},
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'POST',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.be.deep.equal({
              first_name: 'changed'
            })
            server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })  
        })
      })
    })
    describe('DELETE call', function(){
      it('should update the delete query in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', "multiple", ["_pre"], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            DELETE: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.where("name", "changed")
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_pre/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : { "query":{ "name": "something" }},
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data.query.name).to.be.equal('changed')
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should add a new query parameter in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            DELETE: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.lessThan('age', 22)
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_pre/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'name': 'abc'},
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.be.deep.equal({ name: 'abc', query: { age: { '$lt': 22 } } })
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should send blank data response for delete all', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'multiple', ['_post'], "DEL")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            DELETE: {
              _post: function(req, res) {
                req.bobjekt.objects = req.bobjekt.objects.map(function(obj){
                  obj.first_name = obj.name
                  delete obj.name
                  return obj
                })
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.del('/api/_post/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {"objects": [{name: 'abc'}, {name: 'pqr'}] },
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'DELETE',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.be.equal(null)
            server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })  
        })
      })
    })
    describe('GET call', function(){
      describe("For multiple scope", function(){
        it('should update the the query in _pre phase', function(done) {
          var api

          // Mock register hooks
          mockRegisterHookCall('built_io_application_user', "multiple", ["_pre"], "GET")

          // Post hooks
          var postHooks = {
            '/v1/application/users': {
              GET: {
                _pre: function(req, res) {
                  req.bobjekt = req.bobjekt.where("name", "changed")
                  // return utils.Promise.resolve()
                  return this.resSuccess(req, res)
                }
              }
            }
          }
          // Adds routes to express server
          // Initialize SDK
          return startAPIServerWithHooks(postHooks)
          .then(function(server) {
            server.api.get('/api/_pre/v1/application/users')
            .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
            .expect(200)
            .send({
              object       : { "query":{ "name": "something" }},
              class_uid    : 'built_io_application_user',
              authtoken    : 'dummyToken',
              event        : 'GET',
              current_user : {
                type      : 'ApplicationUser',
                authtoken : 'dummyToken',
                uid       : 'anonymous',
                email     : 'testUser@raweng.com'
              }
            })
            .end(function(err, res) {
              expect(res.body.data.query.name).to.be.equal('changed')
              return server.extensionSDK.stop()
              .then(function(){
                done()
              })
            })
          })
        })
        it('should add a new query parameter in _pre phase', function(done) {
          var api

          // Mock register hooks
          mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "GET")

          // Post hooks
          var postHooks = {
            '/v1/application/users': {
              GET: {
                _pre: function(req, res) {
                  req.bobjekt = req.bobjekt.count()
                  // return utils.Promise.resolve()
                  return this.resSuccess(req, res)
                }
              }
            }
          }
          // Adds routes to express server
          // Initialize SDK
          return startAPIServerWithHooks(postHooks)
          .then(function(server) {
            server.api.get('/api/_pre/v1/application/users')
            .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
            .expect(200)
            .send({
              object       : {'name': 'abc'},
              class_uid    : 'built_io_application_user',
              authtoken    : 'dummyToken',
              event        : 'GET',
              current_user : {
                type      : 'ApplicationUser',
                authtoken : 'dummyToken',
                uid       : 'anonymous',
                email     : 'testUser@raweng.com'
              }
            })
            .end(function(err, res) {
              expect(res.body.data).to.be.deep.equal({count: true, name : 'abc'})
              return server.extensionSDK.stop()
              .then(function(){
                done()
              })
            })
          })
        })
        it('should change the response structure in _post phase', function(done) {
          var api

          // Mock register hooks
          mockRegisterHookCall('built_io_application_user', 'multiple', ['_post'], "GET")

          // Post hooks
          var postHooks = {
            '/v1/application/users': {
              GET: {
                _post: function(req, res) {
                  req.bobjekt.objects = req.bobjekt.objects.map(function(obj){
                    obj.first_name = obj.name
                    delete obj.name
                    return obj
                  })
                  // return utils.Promise.resolve()
                  return this.resSuccess(req, res)
                }
              }
            }
          }
          // Adds routes to express server
          // Initialize SDK
          return startAPIServerWithHooks(postHooks)
          .then(function(server) {
            server.api.get('/api/_post/v1/application/users')
            .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
            .expect(200)
            .send({
              object       : {"objects": [{name: 'abc'}, {name: 'pqr'}] },
              class_uid    : 'built_io_application_user',
              authtoken    : 'dummyToken',
              event        : 'GET',
              current_user : {
                type      : 'ApplicationUser',
                authtoken : 'dummyToken',
                uid       : 'anonymous',
                email     : 'testUser@raweng.com'
              }
            })
            .end(function(err, res) {
              expect(res.body.data.objects).to.be.deep.equal([{
                first_name: 'abc'
              }, {
                first_name: 'pqr'
              }])
              server.extensionSDK.stop()
              .then(function(){
                done()
              })
            })  
          })
        })
      })
      describe("For single scope", function(){
        it('should ignore any query parameters set in _pre phase', function(done) {
          var api

          // Mock register hooks
          mockRegisterHookCall('built_io_application_user', "single", ["_pre"], "GET")

          // Post hooks
          var postHooks = {
            '/v1/application/users/blt123': {
              GET: {
                _pre: function(req, res) {
                  req.bobjekt = req.bobjekt.assign({name: "something"})
                  // return utils.Promise.resolve()
                  return this.resSuccess(req, res)
                }
              }
            }
          }
          // Adds routes to express server
          // Initialize SDK
          return startAPIServerWithHooks(postHooks)
          .then(function(server) {
            server.api.get('/api/_pre/v1/application/users/blt123')
            .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
            .expect(200)
            .send({
              object       : 'blt123',
              class_uid    : 'built_io_application_user',
              authtoken    : 'dummyToken',
              event        : 'GET',
              current_user : {
                type      : 'ApplicationUser',
                authtoken : 'dummyToken',
                uid       : 'anonymous',
                email     : 'testUser@raweng.com'
              }
            })
            .end(function(err, res) {
              expect(res.body).to.be.deep.equal({
                isExtensionResponse: true,
                data: null
              })
              return server.extensionSDK.stop()
              .then(function(){
                done()
              })
            })
          })
        })
        it('should update response structure in _post phase', function(done) {
          var api

          // Mock register hooks
          mockRegisterHookCall('built_io_application_user', "single", ["_post"], "GET")

          // Post hooks
          var postHooks = {
            '/v1/application/users/blt123': {
              GET: {
                _post: function(req, res) {
                  req.bobjekt = {
                    name: 'something',
                    age: 22
                  }
                  // return utils.Promise.resolve()
                  return this.resSuccess(req, res)
                }
              }
            }
          }
          // Adds routes to express server
          // Initialize SDK
          return startAPIServerWithHooks(postHooks)
          .then(function(server) {
            server.api.get('/api/_post/v1/application/users/blt123')
            .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
            .expect(200)
            .send({
              object       : { name: 'ignored'},
              class_uid    : 'built_io_application_user',
              authtoken    : 'dummyToken',
              event        : 'GET',
              current_user : {
                type      : 'ApplicationUser',
                authtoken : 'dummyToken',
                uid       : 'anonymous',
                email     : 'testUser@raweng.com'
              }
            })
            .end(function(err, res) {
              expect(res.body).to.be.deep.equal({
                isExtensionResponse: true,
                data: {
                  name: 'something',
                  age : 22
                }
              })
              return server.extensionSDK.stop()
              .then(function(){
                done()
              })
            })
          })
        })
      })
    })
    describe('PUT call', function(){
      it('should update the field in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'single', ['_pre'], "PUT")

        // Post hooks
        var postHooks = {
          '/v1/application/users/blt123': {
            PUT: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.set('name', 'changed')
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.put('/api/_pre/v1/application/users/blt123')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'name': 'abc'},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'PUT',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.isExtensionResponse).to.be.equal(true)
            expect(res.body.data.name).to.be.equal('changed')
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should add a new field field in _pre phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'single', ['_pre'], "PUT")

        // Post hooks
        var postHooks = {
          '/v1/application/users/blt123': {
            PUT: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.set('newField', 'value')
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.put('/api/_pre/v1/application/users/blt123')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'name': 'abc'},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'PUT',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.deep.equal({
              name    : 'abc',
              newField: 'value',
              uid: 'blt123'
            })
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
      })
      it('should change the response structure in _post phase', function(done) {
        var api

        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'single', ['_post'], "PUT")

        // Post hooks
        var postHooks = {
          '/v1/application/users/blt123': {
            PUT: {
              _post: function(req, res) {
                req.bobjekt.name = "changed"
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        // Adds routes to express server
        // Initialize SDK
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.put('/api/_post/v1/application/users/blt123')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'name': 'abc'},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'PUT',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            expect(res.body.data).to.be.deep.equal({
              name: 'changed'
            })
            server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })  
        })
      })
    })
  })
  describe("Error", function () {
    it("should handle the error thrown in _pre phase", function(done) {
      // Mock register hooks
      mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/application/users': {
          POST: {
            _pre: function(req, res) {
              return utils.Promise.reject({
                name: "is a mandaotory field"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/application/users')
        .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'first_name': 'abc'},
          class_uid    : 'built_io_application_user',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is a mandaotory field',
            path    : "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it("should handle the error thrown in _post phase", function(done) {
      
      // Mock register hooks
      mockRegisterHookCall('built_io_application_user', 'multiple', ['_post'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/application/users': {
          POST: {
            _post: function(req, res) {
              return utils.Promise.reject({
                name: "is invalid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_post/v1/application/users')
        .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'first_name': 'abc'},
          class_uid    : 'built_io_application_user',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is invalid',
            path: 'name'
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
  })
  describe('Current User', function () {
    it("should pass current_user\'s information _pre phase", function(done) {
        // Mock register hooks
        mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")

        // Post hooks
        var postHooks = {
          '/v1/application/users': {
            POST: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.set('changed')
                expect(req.built.getContextVar('currentUser')).to.be.deep.equal({
                  type      : 'ApplicationUser',
                  authtoken : 'dummyToken',
                  uid       : 'anonymous',
                  email     : 'testUser@raweng.com'
                })
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.post('/api/_pre/v1/application/users')
          .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'first_name': 'abc'},
            class_uid    : 'built_io_application_user',
            authtoken    : 'dummyToken',
            event        : 'POST',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
    })
  })
  describe('Helpers on request object', function () {
    it('should have helper properties attached on request object', function (done) {
      // Mock register hooks
      mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")
      
      // Post hooks
      var postHooks = {
        '/v1/application/users': {
          POST: {
            _pre: function(req, res) {
              expect(req).to.have.property('built')
              expect(req).to.have.property('builtApp')
              expect(req).to.have.property('bclass')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/application/users')
        .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'first_name': 'abc'},
          class_uid    : 'built_io_application_user',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should instantiate proper class in core middleware', function (done) {
      // Mock register hooks
      mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")
      
      // Post hooks
      var postHooks = {
        '/v1/application/users': {
          POST: {
            _pre: function(req, res) {
              expect(req.bclass.uid).to.be.equal('built_io_application_user')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/application/users')
        .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'first_name': 'abc'},
          class_uid    : 'built_io_application_user',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should instantiate App instance with proper api_key in core middleware', function (done) {
     // Mock register hooks
      mockRegisterHookCall('built_io_application_user', 'multiple', ['_pre'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/application/users': {
          POST: {
            _pre: function(req, res) {
              expect(req.builtApp.options.headers.application_api_key).to.be.equal('dummy_api_key')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/application/users')
        .set('application_api_key', 'dummy_api_key')
          .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'first_name': 'abc'},
          class_uid    : 'built_io_application_user',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
  })
})