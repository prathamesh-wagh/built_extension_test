var ExtensionSDK = require('../index')

describe("For Logger calls", function() {
  var currentUser = {
    type     : 'ApplicationUser',
    authtoken: 'dummyToken',
    uid      : 'anonymous',
    email    : 'testUser@raweng.com'
  }
  // Mocks hooks register call
  beforeEach(function(){
    httpMock('https://api.built.io')
    .put('/v1/extensions/local1/hooks', {
      hooks: []
    })
    .reply(201)
  })

  describe('Successfully Execution', function() {
    it("should create log successfully", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'log',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.log(currentUser, 'currentUser', ['1'])
            .then(function(result) {
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
    it("should create info log successfully", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'info',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['2'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.info(currentUser, 'currentUser', ['2'])
            .then(function(result) {
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
    it("should create warn log successfully", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'warn',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['3'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.warn(currentUser, 'currentUser', ['3'])
            .then(function(result) {
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
    it("should create error log successfully", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'error',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['4'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.error(currentUser, 'currentUser', ['4'])
            .then(function(result) {
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
  })

  describe("Testing debug level", function(){

    it("should not create a log when debug level is set to NONE", function(done) {
      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            req.logger.setDebugLevel(req.logger.Levels.NONE)
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.log(currentUser, 'currentUser', ['1'])
            .then(function(result) {
              expect(result).to.be.empty
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })

    it("should should send only error logs when debug level is set to ERROR", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'error',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            req.logger.setDebugLevel(req.logger.Levels.ERROR)
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.log(currentUser, 'currentUser', ['1'])
            .then(function(result) {
              expect(result).to.be.empty
              return req.logger.info("timepass")
            })
            .then(function(result){
              expect(result).to.be.empty
              return req.logger.warn("timepass")
            })
            .then(function(result){
              expect(result).to.be.empty
              return req.logger.error(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })

    it("should should send warnings and error logs when debug level is set to WARN", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'error',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'warn',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            req.logger.setDebugLevel(req.logger.Levels.WARN)
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.log(currentUser, 'currentUser', ['1'])
            .then(function(result) {
              expect(result).to.be.empty
              return req.logger.info("timepass")
            })
            .then(function(result){
              expect(result).to.be.empty
              return req.logger.warn(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return req.logger.error(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })

    it("should should send warnings, error and info logs when debug level is set to INFO", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'error',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'warn',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'info',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            req.logger.setDebugLevel(req.logger.Levels.INFO)
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.log(currentUser, 'currentUser', ['1'])
            .then(function(result) {
              expect(result).to.be.empty
              return req.logger.info(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return req.logger.warn(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return req.logger.error(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })

    it("should should send all logs when debug level is set to LOG", function(done) {
      httpMock('https://api.built.io')
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'error',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'warn',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'info',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })
      .post('/v1/extensions/local1/logs', {
        log: {
          type : 'log',
          data : JSON.stringify(currentUser) + ', currentUser, '+ JSON.stringify(['1'])
        }
      })
      .reply(201, {
        notice: "Woot! Log created successfully."
      })

      // Post hooks
      var testFunction = {
        '/v1/functions/testFunction': {
          POST: function(req, res){
            var that = this
            expect(req.built.getContextVar('currentUser')).to.be.deep.equal(currentUser)
            return req.logger.log(currentUser, 'currentUser', ['1'])
            .then(function(result) {
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return req.logger.info(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return req.logger.warn(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return req.logger.error(currentUser, 'currentUser', ['1'])
            })
            .then(function(result){
              expect(result.entity.notice).to.be.equal("Woot! Log created successfully.")
              return that.resSuccess(req, res, result)
            })
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(testFunction)
      .then(function(server) {
        server.api.post('/api/v1/functions/testFunction')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          data         : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : currentUser
        })
        .end(function(err, res) {
          // expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done(err)
          })
        })
      })
    })
  })
})