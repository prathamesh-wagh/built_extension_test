var ExtensionSDK = require('../index')

describe("Hooks on '/objects' endpoint Method POST", function() {
  describe('Successfully Execution', function() {
    it('should update the field in _pre phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _pre: function(req, res) {
              req.bobjekt = req.bobjekt.set('name', 'changed')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should add a new field field in _pre phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _pre: function(req, res) {
              req.bobjekt = req.bobjekt.set('newField', 'value')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.data).to.deep.equal({
            name    : 'abc',
            newField: 'value'
          })
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should change the response structure in _post phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_post'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _post: function(req, res) {
              req.bobjekt.name = "changed"
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_post/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.data).to.be.deep.equal({
            name: 'changed'
          })
          server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })  
      })
    })
  })
  describe("Error", function () {
    it("should handle the error thrown in _pre phase", function(done) {
      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _pre: function(req, res) {
              return utils.Promise.reject({
                name: "is not valid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is not valid',
            path: "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it("should handle the error thrown in _post phase", function(done) {
      
      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_post'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _post: function(req, res) {
              return utils.Promise.reject({
                name: "is not valid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_post/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is not valid',
            path: "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
  })
  describe('Current User', function () {
    it("should pass current_user\'s information _pre phase", function(done) {
        // Mock register hooks
        mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")

        // Post hooks
        var postHooks = {
          '/v1/classes/person/objects': {
            POST: {
              _pre: function(req, res) {
                req.bobjekt = req.bobjekt.set('changed')
                expect(req.built.getContextVar('currentUser')).to.be.deep.equal({
                  type      : 'ApplicationUser',
                  authtoken : 'dummyToken',
                  uid       : 'anonymous',
                  email     : 'testUser@raweng.com'
                })
                // return utils.Promise.resolve()
                return this.resSuccess(req, res)
              }
            }
          }
        }
        
        return startAPIServerWithHooks(postHooks)
        .then(function(server) {
          server.api.post('/api/_pre/v1/classes/person/objects')
          .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
          .expect(200)
          .send({
            object       : {'name': 'abc'},
            class_uid    : 'person',
            authtoken    : 'dummyToken',
            event        : 'POST',
            current_user : {
              type      : 'ApplicationUser',
              authtoken : 'dummyToken',
              uid       : 'anonymous',
              email     : 'testUser@raweng.com'
            }
          })
          .end(function(err, res) {
            return server.extensionSDK.stop()
            .then(function(){
              done()
            })
          })
        })
    })
  })
  describe('Helpers on request object', function () {
    it('should have helper properties attached on request object', function (done) {
      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")
      
      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _pre: function(req, res) {
              expect(req).to.have.property('built')
              expect(req).to.have.property('builtApp')
              expect(req).to.have.property('bclass')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should instantiate proper class in core middleware', function (done) {
      // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")
      
      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _pre: function(req, res) {
              expect(req.bclass.uid).to.be.equal('person')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should instantiate App instance with proper api_key in core middleware', function (done) {
     // Mock register hooks
      mockRegisterHookCall('person', 'multiple', ['_pre'], "POST")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects': {
          POST: {
            _pre: function(req, res) {
              expect(req.builtApp.options.headers.application_api_key).to.be.equal('dummy_api_key')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.post('/api/_pre/v1/classes/person/objects')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'POST',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
  })
})