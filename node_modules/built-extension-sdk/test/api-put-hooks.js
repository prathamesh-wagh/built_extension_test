var ExtensionSDK = require('../index')

describe("Hooks on '/objects' endpoint Method PUT", function() {
  describe('Successfully Execution', function() {
    it('should update the field in _pre phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'single', ['_pre'], "PUT")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects/blt123': {
          PUT: {
            _pre: function(req, res) {
              req.bobjekt = req.bobjekt.set('name', 'changed')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.put('/api/_pre/v1/classes/person/objects/blt123')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'PUT',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.isExtensionResponse).to.be.equal(true)
          expect(res.body.data.name).to.be.equal('changed')
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should add a new field field in _pre phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'single', ['_pre'], "PUT")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects/blt123': {
          PUT: {
            _pre: function(req, res) {
              req.bobjekt = req.bobjekt.set('newField', 'value')
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.put('/api/_pre/v1/classes/person/objects/blt123')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object        : {'name': 'abc'},
          previousObject: {"name": "xyz"},
          class_uid     : 'person',
          authtoken     : 'dummyToken',
          event         : 'PUT',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.data).to.deep.equal({
            name    : 'abc',
            newField: 'value',
            uid: 'blt123'
          })
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should have previous data in bobject for _pre phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'single', ['_pre'], "PUT")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects/blt123': {
          PUT: {
            _pre: function(req, res) {
              req.bobjekt = req.bobjekt.set('newField', 'value')
              req.bobjekt.data.name.should.be.equal("xyz")
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.put('/api/_pre/v1/classes/person/objects/blt123')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object        : {'name': 'abc'},
          previousObject: {"name": "xyz"},
          class_uid     : 'person',
          authtoken     : 'dummyToken',
          event         : 'PUT',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.data).to.deep.equal({
            name    : 'abc',
            newField: 'value',
            uid: 'blt123'
          })
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it('should change the response structure in _post phase', function(done) {
      var api

      // Mock register hooks
      mockRegisterHookCall('person', 'single', ['_post'], "PUT")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects/blt123': {
          PUT: {
            _post: function(req, res) {
              req.bobjekt.name = "changed"
              // return utils.Promise.resolve()
              return this.resSuccess(req, res)
            }
          }
        }
      }
      // Adds routes to express server
      // Initialize SDK
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.put('/api/_post/v1/classes/person/objects/blt123')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'PUT',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.data).to.be.deep.equal({
            name: 'changed'
          })
          server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })  
      })
    })
  })
  describe("Error", function () {
    it("should handle the error thrown in _pre phase", function(done) {
      // Mock register hooks
      mockRegisterHookCall('person', 'single', ['_pre'], "PUT")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects/blt123': {
          PUT: {
            _pre: function(req, res) {
              return utils.Promise.reject({
                name: "is not valid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.put('/api/_pre/v1/classes/person/objects/blt123')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'PUT',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is not valid',
            path: "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
    it("should handle the error thrown in _post phase", function(done) {
      
      // Mock register hooks
      mockRegisterHookCall('person', 'single', ['_post'], "PUT")

      // Post hooks
      var postHooks = {
        '/v1/classes/person/objects/blt123': {
          PUT: {
            _post: function(req, res) {
              return utils.Promise.reject({
                name: "is not valid"
              })
            }
          }
        }
      }
      
      return startAPIServerWithHooks(postHooks)
      .then(function(server) {
        server.api.put('/api/_post/v1/classes/person/objects/blt123')
        .set('application_api_key', 'dummy_api_key')
         .set('secret_key', 'dummy_secret_key')
        .expect(200)
        .send({
          object       : {'name': 'abc'},
          class_uid    : 'person',
          authtoken    : 'dummyToken',
          event        : 'PUT',
          current_user : {
            type      : 'ApplicationUser',
            authtoken : 'dummyToken',
            uid       : 'anonymous',
            email     : 'testUser@raweng.com'
          }
        })
        .end(function(err, res) {
          expect(res.body.errors).to.be.deep.equal([{
            errorKey: 'is not valid',
            path: "name"
          }])
          return server.extensionSDK.stop()
          .then(function(){
            done()
          })
        })
      })
    })
  })
})