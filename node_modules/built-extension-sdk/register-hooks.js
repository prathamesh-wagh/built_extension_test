var endpointsRegex  = require('./endpoints-regex')	
var restfullAdaptor = require('./framework/restfullAdaptor')
var utils           = require('./framework/utils')

module.exports = function (extensionInstance) {
	var hooks            = []
	var appInstance      = extensionInstance.getAppInstance()
	var appOptions       = appInstance.getConfig()
	var extensionOptions = extensionInstance.getConfig()
	parseRoutesForHooks(extensionOptions.routes, '', hooks)
	
	return restfullAdaptor.makeCall({
		path   : appInstance.getApiUrl()+"/v1/extensions/"+extensionOptions.extension_key+"/hooks",
		headers: {
			application_api_key : appOptions.application_api_key,
			master_key          : appOptions.master_key,
			extension_key       : extensionOptions.extension_key
		},
		method: 'PUT',
		entity: {
			"hooks": hooks
		}
	})
	.catch(function(err){
		console.log("Error status code: ", err.status)
		console.log("Error headers: ", err.headers)
		console.log("Error body: ", err.entity)
		return true
	})
}

function parseRoutesForHooks(routes, route, hooks){
	route = route || ''
	hooks = hooks || []
	for (var key in routes) {
    if(isRoute(key)){
      parseRoutesForHooks(routes[key], route + key, hooks)
    } else{
    	var curriedPushInHooks = pushInHooks.bind(null, routes, route, key, hooks)
    	// Regex for /v1/application/user/userUid
    	if(route.match(endpointsRegex.singleAppUserEndpoint))
    		curriedPushInHooks('built_io_application_user','single')
    	// Regex for /v1/application/user
    	else if(route.match(endpointsRegex.multiAppUserEndpoint))
    		curriedPushInHooks('built_io_application_user','multiple')
    	// Regex for /v1/classes/:classUid/objects/:objectUid
    	else if(route.match(endpointsRegex.singleObjectEndpoint)) 
      	curriedPushInHooks(extractClassUid(route, endpointsRegex.singleObjectEndpoint),'single')
      // Regex for /v1/classes/:classUid/objects
    	else if(route.match(endpointsRegex.multiObjectEndpoint ))
    		curriedPushInHooks(extractClassUid(route, endpointsRegex.multiObjectEndpoint),'multiple')
    }
  }
}

/**
 * Extracts classUid using regex
 */
function extractClassUid(route, regex){
	return route.match(regex)[1]
}

/*
	Parses the route, extracts the hooks and pushes it in hooks array
*/
function pushInHooks(routes, route, key, hooks, classUid, scope){
	key = key.toUpperCase()

	hooks.push({
		version  : "v1",
		class_uid: classUid,
		scope    : scope,
		method   : key === "DELETE" ? "DEL" : key,
		phases   : extractHooks(routes, key)
	})	
}

function extractHooks(routes, key){
	var hooks = []
	if (routes[key]['_pre'])
		hooks.push('_pre')
	if (routes[key]['_post'])
		hooks.push('_post')

	return hooks
}

/**
 * Method check if the path is of type "/something"
 */
function isRoute(path){
  var regex = new RegExp("\/.*")
  return (typeof path === "string") && !!path.match(regex)
}
