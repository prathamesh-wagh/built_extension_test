process.env.NODE_ENV = 'test'

var autoRequire  = require('./framework/auto-require')
var chai         = require('chai')
var Mocha        = require('mocha')
var testDir      = __dirname + '/test'
var utils        = require('./framework/utils')
var Built        = require('./index')
GLOBAL.supertest = require('supertest')
GLOBAL.should    = chai.should()
GLOBAL.expect    = chai.expect
GLOBAL.httpMock  = require('nock')

// == Helper functions ===

// Starts API server on port number 2000
GLOBAL.startAPIServerWithHooks = function(postHooks){
  // Adds routes to express server
  // Initialize SDK
  var extensionSDK = Built.App({
    application_api_key: 'dummy_api_key',
    master_key         : 'dummy_master_key',
    protocol           : "https",
    host               : "api.built.io"
  }).Extension({
    secret_key    : 'dummy_secret_key',
    extension_key : 'local1',
    routes        : postHooks    
  })
  return extensionSDK
  .start(2000)
  .then(function(expApp) {
    return {
      extensionSDK : extensionSDK,
      api          : supertest(expApp.getAppInstance())
    }
  })
}

// Helper function to mock register calls
GLOBAL.mockRegisterHookCall = function (class_uid, scope, phases, method) {
  // Mock register hooks
  httpMock('https://api.built.io')
  .put("/v1/extensions/local1/hooks", {
    hooks: [{
      version  : "v1",
      class_uid: class_uid,
      scope    : scope,
      method   : method,
      phases   : phases
    }]
  })
  .reply(201)
}

// Our Mocha runner
var mocha = new Mocha({
  ui       : "bdd",
  timeout  : 2000,
  slow     : 100
})

var testFiles = []


// Gets all jsFiles
testFiles = testFiles.concat(autoRequire.traverseAndReturnJSFileNames(testDir))

testFiles = utils.flattenDeep(testFiles)


// Add all test files in mocha
testFiles.forEach(function(file) {
  if(file)
    mocha.addFile(file);
})

// Run the files in Mocha
utils.Promise.resolve()
.then(function(){
  return utils.Promise.wrapNodeFnInPromise(mocha.run).call(mocha)
})
.then(function(){
  process.exit(0)
})
.catch(function(err){
	console.log(err)
  process.exit(0)
})