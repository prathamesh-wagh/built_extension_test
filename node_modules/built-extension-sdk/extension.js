var router        = require('./router')
var FrameworkApp  = require('./framework/app')
var RegisterHooks = require('./register-hooks')
var middlewares   = require('./middlewares')
var coreRoutes 		= require('./routes')
var express 			= require('express')
/**
 * constants
 */
// const MIDDLEWARE_PATH = /^\/(?:_pre|_post)\/v[0-9]\/.*/i

var ExtensionSDK = function(app, configs) {
	this.app          = app
	this.configs      = setConfig(configs)
	this.frameworkApp = FrameworkApp()
}


var consOptions = utils.curry(function(extension_key, secret_key, static, routes){
	if(utils.isNil(secret_key))
		throw "secret_key is mandatory. Please ensure you provide it in app.Extensions constructor"

	if(utils.isNil(extension_key))
		throw "extension_key is mandatory. Please ensure you provide it in app.Extensions constructor"

	return {
		extension_key: extension_key,
		secret_key   : secret_key,
		static       : static,
		routes       : routes
	}
})

var setConfig = function(config){
	if(!config)
		return {}

	if(utils.isString(config)){
		return {
			extension_key: config
		}
	}
	
	if(utils.isPlainObject(config))
		return consOptions(config.extension_key, config.secret_key, config.static, config.routes)
	
	checkTypeError(false, "config", "object")
}


var checkTypeError = function(isValid, value, expectedType){
	if(!isValid)
		throw new Error(value +" should be of type "+ expectedType)
}

ExtensionSDK.prototype.setExtensionOptions = function(parameter, value, existingOptions){
	var extension_key = existingOptions.extension_key
	var secret_key    = existingOptions.secret_key
	var static        = existingOptions.static
	var routes        = existingOptions.routes
	
	switch(parameter){
		case "extension_key":
			extension_key = value
			break;
		case "secret_key":
			secret_key = value
			break;
		case "static":
			static = value
			break;
		case "routes":
			routes = value
			break;
	}

	this.configs = consOptions(extension_key, secret_key, static, routes)
	return this;
}

ExtensionSDK.prototype.getAppInstance = function(){
	return this.app
}

ExtensionSDK.prototype.getConfig = function(){
	return this.configs
}

/**
 * Helper method for getting extension key.
 */
ExtensionSDK.prototype.getExtensionKey = function(){
	return this.configs.extension_key
}

/**
 * Gets the secret_key
 */
ExtensionSDK.prototype.getSecretKey = function(){
	return this.configs.secret_key
}

/**
 * Sets Extensions key
 */
ExtensionSDK.prototype.setExtensionKey = function(extensionKey){
	return setExtensionOptions("extension_key", extensionKey, this.getConfig())
}

/**
 * Sets Secret key
 */
ExtensionSDK.prototype.setSecretKey = function(secretKey){
	return setExtensionOptions("secret_key", secretKey, this.getConfig())
}

/**
 * Sets Static content
 * @param {[type]} static [description]
 */
ExtensionSDK.prototype.setStatic = function(static){
	return setExtensionOptions("static", static, this.getConfig())
}

/**
 * Set routes for API server
 * @param {[type]} routes [description]
 */
ExtensionSDK.prototype.setRoutes = function(routes){
	return setExtensionOptions("routes", routes, this.getConfig())	
}

ExtensionSDK.prototype.start = function(port){
	var that              = this
	var appConfig         = this.app.getConfig()
	var pluginRoutes      = this.configs.routes || {}
	var static            = this.configs.static
	var extensionKey      = this.configs.extension_key || 'blt_ext_key'
	var serverAppInstance = this.frameworkApp.getAppInstance()
	var appInstance       = this.getAppInstance()
	var applicationApiKey = appConfig.application_api_key
	var masterKey         = appConfig.master_key
	
	port                  = port || serverAppInstance.config.get('server:port')

	// We load user specific routes
	return utils.Promise.resolve()
	.then(function(){
		return middlewares.load("/", [
			middlewares.checkAPIKey,
			middlewares.checkSecretKey,
      middlewares.consoleLogger,
      middlewares.reqParams,
      middlewares.pragmaticRest,
      middlewares.responseTime,
      middlewares.responseTimeout,
      middlewares.wrapInBuilt], serverAppInstance, that) })
	.then(function(){
		return middlewares.load("/api", [
			middlewares.wrapInBuiltApp
    ], serverAppInstance, that)
	})
	.then(function(){
		return that.frameworkApp.startWithPort(port)
	})
	.then(function(){
		// var clonedRoutes = utils.clone(coreRoutes)
		return router(serverAppInstance, coreRoutes, pluginRoutes)
	})
	.then(function(){
		return RegisterHooks(that)
	})
	.then(function(){
		if(static)
			serverAppInstance.use(express.static(static))
	})
	.then(function(){
		return that.frameworkApp
	})
	.catch(function(err){
		if(err.stack)
			console.log("Error stack", err.stack)
		else if(err.error)
			console.log("Error", err.error)
		else
			console.log("Error", err.entity)

		process.exit(0)
	})
}

ExtensionSDK.prototype.stop = function(){
	return this.frameworkApp.stop()
}

module.exports = function(configs){
	return new ExtensionSDK(this, configs)
}