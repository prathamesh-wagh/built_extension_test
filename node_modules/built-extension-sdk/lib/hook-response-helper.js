var endpointsRegex = require('../endpoints-regex')

module.exports.process = function(req, res, singleObjectEndpointRegex, multiObjectEndpointRegex){
	var that = this
	// BAD HACK
	var superResSuccess = this.resSuccess.bind(this)
	this.resSuccess = function(creq, cres) {
		that.resSuccess  = superResSuccess
		var reqMethod    = req.method
		var hookType     = req.url.match(/\/api\/_(pre|post)\//)[1]
		var reqUrl       = req.url.split("/api/_"+hookType)[1]
		var responseData = null
	
		if(reqUrl.match(singleObjectEndpointRegex)){
			responseData = singleObjectResponse(creq, cres, reqUrl, hookType, reqMethod)			
		} 
		else if(reqUrl.match(multiObjectEndpointRegex)){
			responseData = multiObjectResponse(creq, cres, reqUrl, hookType, reqMethod)
		}

		return superResSuccess(creq, cres, responseData)
	}
}

function multiObjectResponse(creq, cres, reqUrl, hookType, reqMethod) {
	if(hookType === "pre"){
		switch(reqMethod){
			case "GET": {
				return creq.bobjekt.data
				break;
			}
			case "POST": {
				return creq.bobjekt.delta
				break;
			}
			case "DEL": {}
			case "DELETE": {
				return creq.bobjekt.data
				break;
			}
		}
	}
	else if(hookType === "post"){
		switch(reqMethod){
			case "GET": {}
			case "POST": {
				return creq.bobjekt
				break;
			}
			case "DEL": {}
			case "DELETE": {
				return null
				break;
			}
		}
	}
}

function singleObjectResponse(creq, cres, reqUrl, hookType, reqMethod) {
	if(hookType === "pre"){
		switch(reqMethod){
			case "GET": {
				return null
				break;
			}
			case "PUT": {
				return creq.bobjekt.delta
				break;
			}
			case "DEL": {}
			case "DELETE": {
				return null
				break;
			}
		}
	}
	else if(hookType === "post"){
		switch(reqMethod){
			case "GET": {}
			case "PUT": {
				return creq.bobjekt
				break;
			}
			case "DEL": {}
			case "DELETE": {
				return null
				break;
			}
		}
	}
}