var restfullAdaptor = require('../framework/restfullAdaptor')
/*
  POST the logs to built.io Backend
*/
module.exports = function(req, res, next) {
  req.logger = new ExtLogger(this, req.headers.extension_key)
  next()
}

function ExtLogger(extApp, serverExtensionKey) {
  this.extApp             = extApp
  this.serverExtensionKey = serverExtensionKey
  this.debugLevel         = 4
}

/**
 * Set of debug level modes.
 * @enum {Number}
 */
ExtLogger.prototype.Levels = {
  /**
    No logs will be sent 
  */
  NONE : 0,
  /**
    Only Error logs will be sent 
  */
  ERROR: 1,
  /**
   Sends Errors and Warnings logs
   */
  WARN : 2,
  /**
    Sends Errors, Warnings and Information logs 
  */
  INFO: 3,
  /**
   Sends all generated logs 
  */
  LOG : 4
}

/**
 * Set debug level. which decides whether the log should be sent to backend server
 */
ExtLogger.prototype.setDebugLevel = function(level){
  this.debugLevel = level
  return this
}

ExtLogger.prototype.log = function() {
  return this.send(this.Levels.LOG,'log', arguments)
}

ExtLogger.prototype.info = function() {
  return this.send(this.Levels.INFO, 'info', arguments)
}

ExtLogger.prototype.warn = function() {
  return this.send(this.Levels.WARN, 'warn', arguments)
}

ExtLogger.prototype.error = function() {
  return this.send(this.Levels.ERROR,'error', arguments)
}

ExtLogger.prototype.send = function(debugLevel, type, dataObj) {
  debugLevel = debugLevel || this.Levels.LOG
  // Checks whether the generated log falls under the allowed debug level
  if(this.debugLevel < debugLevel){
    return utils.Promise.resolve()
  }
  
  dataObj              = formatLogData(dataObj)
  var extensionOptions = this.extApp.getConfig()
  var appInstance      = this.extApp.getAppInstance()
  var appOptions       = appInstance.getConfig()
  // Extension key sent my server is more reliable than the one user has inputed
  var extension_key     = this.serverExtensionKey || this.extApp.getExtensionKey()

  return restfullAdaptor.makeCall({
    path   : appInstance.getApiUrl()+"/v1/extensions/"+extension_key+"/logs",
    headers: {
      application_api_key : appOptions.application_api_key,
      master_key          : appOptions.master_key,
      extension_key       : extensionOptions.extension_key
    },
    method: 'POST',
    entity: {
      log: {
        type : type,
        data : dataObj
      }
    }
  })
}

function formatLogData(logData){
  var strLog   = ''
  var logArray = Array.prototype.slice.call(logData)
  /*
    convert array to comman seperated string
    eg:
      logArray: ['a', 'b', {'c': 'd'}]
      "a", "b", {"c":"d"}
  */
  logArray.map(function(data, i) {
    // We stringify the data
    if(typeof data !== "string")
      data = JSON.stringify(data)
    
    if(i===0)
      strLog = data
    else
      strLog = strLog + ", " + data
  })

  return strLog
}

