var hookResponseHelper = require('../lib/hook-response-helper')
var endpointsRegex     = require('../endpoints-regex')

module.exports = {
	before: function (req, res) {
		hookResponseHelper.process.call(this, req, res, endpointsRegex.singleObjectEndpoint, endpointsRegex.multiObjectEndpoint)

		return utils.Promise.resolve()
	},
	GET:{
		_pre: function(req, res){
			req.bobjekt = req.bclass.Query(req.payload.object)
			return utils.Promise.resolve()
		},
		_post: function(req, res){
			req.bobjekt = req.payload.object
			return utils.Promise.resolve()
		}
	},
	POST:{
		_pre: function(req, res){
			req.bobjekt = genericObjectPre(req, req.payload.object)
			return utils.Promise.resolve()
		},
		_post: function(req, res){
			req.bobjekt = req.payload.object
			return utils.Promise.resolve()
		}
	},
	DELETE:{
		_pre: function(req, res){
			req.bobjekt = req.bclass.Query(req.payload.object)
			return utils.Promise.resolve()
		},
		_post: function(req, res){
			req.bobjekt = req.payload.object
			return utils.Promise.resolve()
		}
	},
	"/:objectUid":{
		GET:{
			_pre: function(req, res){
				var objectUid    = req.params.objectUid
				req.bobjekt      = genericObjectPre(req, objectUid)
				req.bobjekt.data = req.payload.previousObject
				return utils.Promise.resolve()
			},
			_post: function(req, res){
				req.bobjekt = req.payload.object
				return utils.Promise.resolve()
			}
		},
		PUT:{
			_pre: function(req, res){
				var objectUid    = req.params.objectUid
				req.bobjekt      = genericObjectPre(req, objectUid).assign(req.payload.object)
				req.bobjekt.data = req.payload.previousObject
				return utils.Promise.resolve()
			},
			_post: function(req, res){
				req.bobjekt = req.payload.object
				return utils.Promise.resolve()
			}
		},
		DELETE:{
			_pre: function(req, res){
				var objectUid    = req.params.objectUid
				req.bobjekt      = genericObjectPre(req, objectUid)
				req.bobjekt.data = req.payload.previousObject
				return utils.Promise.resolve()
			},
			_post: function(req, res){
				req.bobjekt = req.payload.object
				return utils.Promise.resolve()
			}
		}
	}
}

function genericObjectPre(req, data){
	return req.bclass.Object(data)
}